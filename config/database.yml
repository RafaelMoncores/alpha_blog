# config/database.yml

# Para desenvolvimento e teste, você pode manter o SQLite com o padrão ou configurá-lo.
# Se você não precisar de um "default" global, pode removê-lo.
# Neste exemplo, vamos manter para development e test, mas configurar production separadamente.
development:
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000
  database: storage/development.sqlite3

test:
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000
  database: storage/test.sqlite3

# Store production database in the storage/ directory, which by default
# is mounted as a persistent Docker volume in config/deploy.yml.
production:
  # O Heroku injeta a variável DATABASE_URL, que já aponta para o PostgreSQL.
  # Explicitamente definimos o adaptador para garantir.
  adapter: postgresql
  url: <%= ENV['DATABASE_URL'] %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>